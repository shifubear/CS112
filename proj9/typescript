Script started on Sat 22 Apr 2017 03:33:18 PM EDT
sf27@kay:~/Desktop/CS112/proj9$ c ls
ArrayQueue.h	Debug		      QueueException.h		 typescript
BST.h		Exception.h	      tester.cpp
BST_Tester.cpp	HeightExperiment.cpp  Tree Height Analysis.ods
BST_Tester.h	HeightExperiment.h    Tree Height Analysis.xlsx
sf27@kay:~/Desktop/CS112/proj9$ cat 


^C
sf27@kay:~/Desktop/CS112/proj9$ cat BST.h BST_Tester.h BE ST_Tester.cpp Exception.hh HeightExperiment.h HeightExperiment.cpp QueueException.h tester.cpp 
/* BST.h declares a "classic" binary search tree of linked nodes.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name:
 * Date:
 * 
 * Class Invariant:
 *   myNumItems == 0 && myRoot == NULL ||
 *   myNumItems > 0 && 
 *     myRoot stores the address of a Node containing an item &&
 *       all items in myRoot->myLeft are less than myRoot->myItem &&
 *       all items in myRoot->myRight are greater than myRoot->myItem.
 */

#ifndef BST_H_
#define BST_H_

#include "Exception.h"
#include "ArrayQueue.h"

#include <iostream>
using namespace std;

typedef int Item;

template <class Item>
class BST {
public:

	BST();
	virtual ~BST();
	bool isEmpty() const;
	unsigned getNumItems() const;

	void insert(const Item& it);
	bool contains(const Item& it);
	unsigned getHeight() const;

	void traverseInorder();
	void traversePreorder();
	void traversePostorder();

private:
	struct Node {
	    Node(const Item& it);
            virtual ~Node();

            void insert(const Item& it);
            bool contains(const Item& it);

            void traverseInorder();
            void traversePreorder();
            void traversePostorder();
            virtual void processItem();
		
            Item myItem;
            Node* myLeft;
            Node* myRight;
	};
	
	Node* myRoot;
	unsigned myNumItems;
	friend class BST_Tester;
};

/*
 * Default constructor. Initializes all default values.
 */
template <class Item>
BST<Item>::BST() {
	myRoot = NULL;
	myNumItems = 0;
}

/*
 * Destructor
 */
template <class Item>
BST<Item>::~BST() {
	delete myRoot;
	myRoot = NULL;
	myNumItems = 0;
}

/*
 * Node constructor. Takes item as parameter.
 */
template <class Item>
BST<Item>::Node::Node(const Item& it) {
   myItem = it;
   myLeft = NULL;
   myRight = NULL;
}

/*
 * Node destructor. Recursive destruction.
 */
template <class Item>
BST<Item>::Node::~Node() {
	delete myLeft;
	delete myRight;
}

/*
 * Checks if BST is empty or not.
 */
template <class Item>
bool BST<Item>::isEmpty() const {
	return myNumItems == 0;
}

/*
 * Returns number of items in BST
 */
template <class Item>
unsigned BST<Item>::getNumItems() const {
	return myNumItems;
}

/*
 * Inserts an item into the BST recursively.
 *
 */
template <class Item>
void BST<Item>::insert(const Item& it) {
	Node* newNode = new Node(it);
	if (myRoot == NULL) {
		myRoot = newNode;
	} else {
		try {
			myRoot->insert(it);
		} catch (Exception& ex) {
			throw Exception("insert", "Cannot insert Node with existing value!");
		}
	}

	myNumItems++;
}

/*
 * Recursive insert method.
 *
 * Throws an error if a node with an existing value is found.
 *
 */
template <class Item>
void BST<Item>::Node::insert(const Item& it) {
	Node* newNode = new Node(it);
	if (it < myItem) {
		if (myLeft == NULL)
			myLeft  = newNode;
		else
			myLeft->insert(it);
	} else if (it > myItem) {
		if (myRight == NULL)
			myRight = newNode;
		else
			myRight->insert(it);
	} else {
		throw Exception("Node insert", "Cannot insert Node with existing value");
	}
}

/*
 * Checks if Item it exists in the BST recursively.
 */
template <class Item>
bool BST<Item>::contains(const Item& it) {
	if (myRoot == NULL)
		return false;

	if (myRoot->myItem == it) {
		return true;
	} else {
		return myRoot->contains(it);
	}
}

/*
 * Recursive node method to find if the BST contains item.
 */
template <class Item>
bool BST<Item>::Node::contains(const Item& it) {

	if (myItem == it) {
		return true;
	} else {
		return (myLeft  != NULL && myLeft->contains(it)) ||
			   (myRight != NULL && myRight->contains(it));
	}
}

/*
 * Returns the height of the BST.
 */
template <class Item>
unsigned BST<Item>::getHeight() const {
	unsigned height = 0;
	ArrayQueue<Node *> myQueue(1);

	if (myRoot != NULL)
		myQueue.append(myRoot);


	while (!myQueue.isEmpty()) {

		int queueSize = myQueue.getSize();

		for (int i = 0; i < queueSize; i++) {
			Node* currentNode = myQueue.remove();
			if (currentNode->myLeft != NULL) {
				try {
					myQueue.append(currentNode->myLeft);
				} catch (QueueException& qe) {
					myQueue.setCapacity( myQueue.getCapacity() * 2 );
					myQueue.append(currentNode->myLeft);
				}
			}
			if (currentNode->myRight != NULL) {
				try {
					myQueue.append(currentNode->myRight);
				} catch (QueueException& qe) {
					myQueue.setCapacity( myQueue.getCapacity() * 2 );
					myQueue.append(currentNode->myRight);
				}
			}
		}

		height++;
	}


	return height;

}

template <class Item>
void BST<Item>::Node::processItem() {
	cout << ' ' << myItem;
}

template <class Item>
void BST<Item>::traversePreorder() {
	if ( !isEmpty() ) {
		myRoot->traversePreorder();
	}
}

template <class Item>
void BST<Item>::Node::traversePreorder() {
	processItem();
	if (myLeft != NULL) {
		myLeft->traversePreorder();
	}
	if (myRight != NULL) {
		myRight->traversePreorder();
	}
}

template <class Item>
void BST<Item>::traversePostorder() {
	if ( !isEmpty() ) {
		myRoot->traversePostorder();
	}
}

template <class Item>
void BST<Item>::Node::traversePostorder() {
	if (myLeft != NULL) {
		myLeft->traversePostorder();
	}
	if (myRight != NULL) {
		myRight->traversePostorder();
	}
	processItem();
}

template <class Item>
void BST<Item>::traverseInorder() {
	if ( !isEmpty() ) {
		myRoot->traverseInorder();
	}
}

template <class Item>
void BST<Item>::Node::traverseInorder() {
	if (myLeft != NULL) {
		myLeft->traverseInorder();
	}
	processItem();
	if (myRight != NULL) {
		myRight->traverseInorder();
	}
}

#endif /*BST_H_*/

/* BST_Tester.h declares a class to test class BST.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef BST_TESTER_H_
#define BST_TESTER_H_

#include "BST.h"
#include <iostream>
using namespace std;

class BST_Tester
{
public:
	void runTests();
	void testConstructor();
	void testInsert();
	void testContains();
	void testTraverse();
	void testGetHeight();
};

#endif /*BST_TESTER_H_*/
/* BST_Tester.cpp defines test-methods for class BST.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
 #include "BST_Tester.h"

#include <cassert>
using namespace std;

void BST_Tester::runTests() {
	cout << "Testing class BST" << endl;
	testConstructor();
	testInsert();
	testContains();
	testTraverse();
	testGetHeight();
	cout << "All tests passed!" << endl;
}

void BST_Tester::testGetHeight() {
	cout << "Testing getHeight()..." << flush;
	BST<double> bst;
	// empty
	assert( bst.getHeight() == 0 );
	cout << " 0 " << flush;
	// balanced
	bst.insert(44);
	assert( bst.getHeight() == 1 );
	cout << " 1 " << flush;
	bst.insert(22);
	assert( bst.getHeight() == 2 );
	cout << " 2 " << flush;
	bst.insert(66);
	assert( bst.getHeight() == 2 );
	cout << " 3 " << flush;
	bst.insert(77);
	assert( bst.getHeight() == 3 );
	cout << " 4a " << flush;
	bst.insert(55);
	assert( bst.getHeight() == 3 );
	cout << " 4b " << flush;
	bst.insert(33);
	assert( bst.getHeight() == 3 );
	cout << " 4c " << flush;
	bst.insert(11);
	assert( bst.getHeight() == 3 );
	cout << " 4d " << flush;
	bst.insert(88);
	assert( bst.getHeight() == 4 );
	cout << " 4e " << flush;
	// chained ascending
      BST<double> bst2a;
      bst2a.insert(11);
      bst2a.insert(22);
      bst2a.insert(33);
      bst2a.insert(44);
      bst2a.insert(55);
      bst2a.insert(66);
      bst2a.insert(77);
      assert( bst2a.getHeight() == 7 );
      cout << " 5a " << flush;
	// chained descending
      BST<double> bst2b;
      bst2b.insert(77);
      bst2b.insert(66);
      bst2b.insert(55);
      bst2b.insert(44);
      bst2b.insert(33);
      bst2b.insert(22);
      bst2b.insert(11);
      assert( bst2b.getHeight() == 7 );
      cout << " 5b " << flush;
	// four 4-node permutations
	BST<double> bst3;
	bst3.insert(44);
	assert( bst3.getHeight() == 1 );
      cout << " 6a " << flush;
	bst3.insert(22);
	assert( bst3.getHeight() == 2 );
      cout << " 6b " << flush;
	bst3.insert(33);
	assert( bst3.getHeight() == 3 );
      cout << " 6c " << flush;
	bst3.insert(55);
	assert( bst3.getHeight() == 3 );
      cout << " 6d " << flush;
	BST<double> bst4;
	bst4.insert(44);
	assert( bst4.getHeight() == 1 );
      cout << " 7a " << flush;
	bst4.insert(33);
	assert( bst4.getHeight() == 2 );
      cout << " 7b " << flush;
	bst4.insert(22);
	assert( bst4.getHeight() == 3 );
      cout << " 7c " << flush;
	bst4.insert(55);
	assert( bst4.getHeight() == 3 );
      cout << " 7d " << flush;
	BST<double> bst5;
	bst5.insert(44);
	assert( bst5.getHeight() == 1 );
      cout << " 8a " << flush;
	bst5.insert(33);
	assert( bst5.getHeight() == 2 );
      cout << " 8b " << flush;
	bst5.insert(55);
	assert( bst5.getHeight() == 2 );
      cout << " 8c " << flush;
	bst5.insert(66);
	assert( bst5.getHeight() == 3 );
      cout << " 8d " << flush;
	BST<double> bst6;
	bst6.insert(44);
	assert( bst6.getHeight() == 1 );
      cout << " 9a " << flush;
	bst6.insert(33);
	assert( bst6.getHeight() == 2 );
      cout << " 9b " << flush;
	bst6.insert(66);
	assert( bst6.getHeight() == 2 );
      cout << " 9c " << flush;
	bst6.insert(55);
	assert( bst6.getHeight() == 3 );
      cout << " 9d " << flush;
	cout << " Passed!" << endl;
}


void BST_Tester::testTraverse() {
	cout << "Testing traverse()..." << endl;
	BST<double> bst;
	bst.insert(55);
	bst.insert(33);
	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(77);
	bst.insert(99);
	bst.insert(88);
	bst.insert(66);
	cout << "- Preorder: expecting: 55 33 11 22 44 77 66 99 88" << endl;
	cout << "- Got                :" << flush;
	bst.traversePreorder(); cout << endl;
	cout << "\n- Postorder: expecting: 22 11 44 33 66 88 99 77 55" << endl;
	cout << "- Got                 :" << flush;
	bst.traversePostorder(); cout << endl;
	cout << "\n- Inorder: expecting: 11 22 33 44 55 66 77 88 99" << endl;
	cout << "- Got               :" << flush;
	bst.traverseInorder(); cout << endl;
		cout << " Passed!" << endl;
}

void BST_Tester::testContains() {
	cout << "Testing contains()... " << flush;
	// empty bst
	BST<double> bst;
	assert( !bst.contains(55) );
	cout << " 1 " << flush;
	// non-empty bst
	bst.insert(55);
	assert( bst.contains(55) );
	cout << " 2 " << flush;

	bst.insert(33);
	bst.insert(77);
	assert( bst.contains(55) );
	assert( bst.contains(33) );
	assert( bst.contains(77) );
	assert( !bst.contains(11) );
	assert( !bst.contains(111) );
	cout << " 3 " << flush;

	bst.insert(11);
	bst.insert(22);
	bst.insert(44);
	bst.insert(66);
	bst.insert(88);
	bst.insert(99);
	for (int i = 1; i <= 100; i++) {
		if ( i % 11 ) {
			assert( !bst.contains(i) );
		} else {
			assert( bst.contains(i) );
		}
	}
	cout << " 4 " << flush;

	cout << " Passed!" << endl;
}

void BST_Tester::testInsert() {
	cout << "Testing insert()... " << flush;
	BST<double> bst;
	assert( bst.isEmpty() );
	cout << " 0 " << flush;
	bst.insert(55);
	assert( !bst.isEmpty() );
	assert( bst.myRoot != NULL );
	assert( bst.myRoot->myItem == 55 );
	assert( bst.myRoot->myLeft == NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.getNumItems() == 1 );
	cout << " 1 " << flush;

	bst.insert(33);
	assert( bst.getNumItems() == 2 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft != NULL );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myItem == 33 );
	cout << " 2 " << flush;

	bst.insert(44);
	assert( bst.getNumItems() == 3 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myRight->myItem == 44 );
	cout << " 3 " << flush;

	bst.insert(11);
	assert( bst.getNumItems() == 4 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft != NULL );
	assert( bst.myRoot->myLeft->myLeft->myItem == 11 );
	cout << " 4 " << flush;

	bst.insert(22);
	assert( bst.getNumItems() == 5 );
	assert( bst.myRoot->myRight == NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight != NULL );
	assert( bst.myRoot->myLeft->myLeft->myRight->myItem == 22 );
	cout << " 5 " << flush;

	bst.insert(77);
	assert( bst.getNumItems() == 6 );
	assert( bst.myRoot->myRight != NULL );
	assert( bst.myRoot->myRight->myItem == 77 );
	cout << " 6 " << flush;

	bst.insert(66);
	assert( bst.getNumItems() == 7 );
	assert( bst.myRoot->myRight->myLeft->myItem == 66 );
	cout << " 7 " << flush;

	bst.insert(99);
	assert( bst.getNumItems() == 8 );
	assert( bst.myRoot->myRight->myRight->myItem == 99 );
	cout << " 8 " << flush;

	bst.insert(88);
	assert( bst.getNumItems() == 9 );
	assert( bst.myRoot->myRight->myRight->myLeft->myItem == 88 );
	cout << " 9 " << flush;

	try {
		bst.insert(55);
	} catch (Exception& e) {
		cout << " 10 " << flush;
	}

	try {
		bst.insert(11);
	} catch (Exception& e) {
		cout << " 11 " << flush;
	}

	try {
		bst.insert(88);
	} catch (Exception& e) {
		cout << " 12 " << flush;
	}

	bst.insert(111);
	assert( bst.getNumItems() == 10 );
	assert( bst.myRoot->myRight->myRight->myRight->myItem == 111 );
	cout << " 13 " << flush;

	cout << " Passed!" << endl;
}

void BST_Tester::testConstructor() {
	cout << "Testing constructor... " << flush;
	BST<double> bst;
	assert( bst.isEmpty() );
	assert( bst.getNumItems() == 0 );
	assert( bst.myRoot == NULL );
	assert( bst.myNumItems == 0 );
	cout << "Passed!" << endl;
}

/* Exception.h defines a class to consolidate the functionality
 *  that different kinds of exceptions have in common.
 * Joel Adams, for CS 112 at Calvin College.
 */

#ifndef EXCEPTION_H_
#define EXCEPTION_H_

#include <string>    // string
#include <iostream>  // ostream
using namespace std;

class Exception {
public:
   /* construct an Exception
    * Parameters: whereThrown, a string naming the method that threw me.
    *              message, a description of the problem.
    */
   Exception(const string& whereThrown, const string& message) { 
      myLocation = whereThrown; 
      myMessage = message; 
   }
   
   virtual ~Exception() {}
   
   /* build a string representation of myself
    * (polymorphic, in case you want to override it)
    */
   virtual string asString() const { 
   	  return "*** " + className() + " in " + myLocation + ": " + myMessage; 
   }
   
   /* polymorphic method to retrieve the name of the class
    *  (used by asString() above)
    */
   virtual string className() const {
   	  return "Exception";
   }

private:
   string myLocation;    // the method where I was thrown
   string myMessage;     // a description of the problem
};  // Exception

/* insert an Exception (or its subclass) into an ostream
 * Parameters: out, an ostream;
 *             e, an Exception.
 * Postcondition: out contains e's string representation
 *               && out is the return-value.
 */
inline ostream& operator<<(ostream& out, const Exception& e) {
	out << e.asString();
	return out;
}
      
#endif /*EXCEPTION_H_*/
/*
 * HeightExperiment.h
 *
 *  Created on: Apr 18, 2017
 *      Author: sf27
 */

#ifndef HEIGHTEXPERIMENT_H_
#define HEIGHTEXPERIMENT_H_

#include <iostream>

class HeightExperiment {
public:
	void run();
	void getHeightOf(const std::string&);
};

#endif /* HEIGHTEXPERIMENT_H_ */
/*
 * HeightExperiment.cpp
 *
 *  Created on: Apr 18, 2017
 *      Author: sf27
 */

#include "BST.h"
#include "HeightExperiment.h"

#include <fstream>
#include <cassert>
#include <string>
#include <stdexcept>
#include <cstdlib>
using namespace std;

void HeightExperiment::run() {

	cout << "Beginning Height Experiment... " << endl;

	string dir = "/home/cs/112/proj/09/randomInts";

	for (int i = 1; i <= 10; i++) {
		string fname;
		cout << "Calculating height for BST number " << i << endl;
		if (i < 10)
			fname = dir + "0" + to_string(i) + ".txt";
		else
			fname = dir + to_string(i) + ".txt";

		getHeightOf(fname);

		cout << endl << endl;
	}
}

void HeightExperiment::getHeightOf(const string& fname) {
	ifstream fin(fname.c_str());
	assert(fin.is_open());

	BST<long> bst;

	int duplicates = 0;
	int numCount = 0;
	string line;
	string::size_type sz;
	while (!fin.eof()) {
		numCount++;
		getline(fin, line);
		long num;
		try {
			num = atol(line.c_str());
		} catch (invalid_argument& ia) {
			break;
		}
		
		try{
			bst.insert(num);
		} catch (Exception& ex) {
			duplicates++;
		}

	}

	cout << "The height of this BST is " << bst.getHeight() << endl;
	cout << "There were " << numCount << " numbers processed." << endl;
	cout << "There are " << bst.getNumItems() << " numbers in the BST." << endl;
	cout << "The number of duplicates in this set of numbers was " << duplicates << endl;
}
/* QueueException.h provides a simple exception class for Queues to throw,
 *   plus subclasses (EmptyQueueException, FullQueueException)
 *   for more fine-grained error-handling.
 * See Exception.h for its superclass.
 * Joel Adams, for CS 112 at Calvin College.
 */
 
#ifndef QUEUEEXCEPTION_H_
#define QUEUEEXCEPTION_H_

#include "Exception.h"

class QueueException : public Exception {
public:
   QueueException(const string& whereThrown, const string& message)
   : Exception(whereThrown, message)
   {}
   
   virtual string className() const {
   	 return "QueueException";
   }
};

class EmptyQueueException : public QueueException {
public:
   EmptyQueueException(const string& whereThrown)
    : QueueException(whereThrown, "queue is empty")
   {}
   
   virtual string className() const {
   	  return "EmptyQueueException";
   }
};

class FullQueueException : public QueueException {
public:
   FullQueueException(const string& whereThrown)
    : QueueException(whereThrown, "queue is full")
   {}
   
   virtual string className() const {
   	  return "FullQueueException";
   }
};


#endif /*QUEUEEXCEPTION_H_*/


#include "BST_Tester.h"
#include "HeightExperiment.h"

int main() {
//	BST_Tester bstt;
//	bstt.runTests();
	HeightExperiment he;
	he.run();
}

sf27@kay:~/Desktop/CS112/proj9$ cd Debug/
sf27@kay:~/Desktop/CS112/proj9/Debug$ ls
BST_Tester.d  HeightExperiment.d  makefile    proj9	  subdir.mk  tester.o
BST_Tester.o  HeightExperiment.o  objects.mk  sources.mk  tester.d
sf27@kay:~/Desktop/CS112/proj9/Debug$ make all
make: Nothing to be done for 'all'.
sf27@kay:~/Desktop/CS112/proj9/Debug$ cd ..
sf27@kay:~/Desktop/CS112/proj9$ ./Debug/proj9 
Beginning Height Experiment... 
Calculating height for BST number 1
The height of this BST is 47
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 2
The height of this BST is 49
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 3
The height of this BST is 47
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 4
The height of this BST is 51
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 5
The height of this BST is 48
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 6
The height of this BST is 46
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 7
The height of this BST is 47
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 8
The height of this BST is 51
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 9
The height of this BST is 49
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


Calculating height for BST number 10
The height of this BST is 49
There were 1048577 numbers processed.
There are 1048576 numbers in the BST.
The number of duplicates in this set of numbers was 1


sf27@kay:~/Desktop/CS112/proj9$ exit

Script done on Sat 22 Apr 2017 03:34:43 PM EDT
