Script started on Wed 22 Mar 2017 05:14:58 PM EDT
sf27@chomsky:~/Desktop/CS112/proj6$ ls
CongaLine.cpp  ListTest1Copy.txt    ListTester1.txt  typescript
CongaLine.h    ListTest1.txt	    ListTester.cpp
Debug	       ListTest2.txt	    ListTester.h
List.h	       ListTester1Copy.txt  main.cpp
sf27@chomsky:~/Desktop/CS112/proj6$ cat main.cpp CongaLine.h Cona gaLine.cpp List. h Lister  Tet ster.h ListTester.cpp ListTest1.txt ListTex st1Copy.txt ListTest2.txt List Tester1Copy.txt ListTesw ter1.txt
/* main.cpp is the driver for a Conga line simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"
#include "ListTester.h"

int main() {
	ListTester lt;
	lt.runTests();
	CongaLine dance("Ann", "Bob");
	dance.run();
}
/* CongaLine.h declares class CongaLine,
 *  a Conga line dance simulation.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */


#ifndef CONGALINE_H_
#define CONGALINE_H_

#include "List.h"
#include <string>
using namespace std;

class CongaLine {
public:
	CongaLine(const string& person1, const string& person2);
	void run();

private:
	List<string> myLine;

	string MY_MENU;
	string myFirstPerson;
	string mySecondPerson;
};

#endif /* CONGALINE_H_ */
/* CongaLine.cpp defines the methods for class CongaLine.
 *
 * @author: Joel Adams, for CS 112 at Calvin College.
 *
 * Based on an exercise by Marc LeBlanc from Wheaton College (MS).
 */

#include "CongaLine.h"

/* The CongaLine constructor
 * @param: person1, a string
 * @param: person2, a string
 * Postcondition: myFirstPerson == person1
 *             && mySecondPerson == person2
 *             && person1 is the first Item in myLine
 *             && person2 is the second Item in myLine
 *             && MY_MENU has been initialized.
 */
CongaLine::CongaLine(const string& person1, const string& person2) {
	myLine.append(person1);
	myLine.append(person2);
	myFirstPerson = person1;
	mySecondPerson = person2;
	MY_MENU = string("Please enter:\n")
				    + " 1 to join the Conga line at the end\n"
					+ " 2 to join the Conga line after a particular person\n"
					+ " 3 to join the Conga line before a particular person\n"
					+ " 4 to quit\n"
					+ "--> ";
}

/* Method to run the CongaLine simulation,
 *  prompting the user via cout
 *  and reading the user's input via cin.
 */
void CongaLine::run() {
	unsigned menuChoice = 0;
	string yourName, otherPersonsName;
	cout << myFirstPerson << " and " << mySecondPerson
			<< " have started a Conga Line!" << endl;

	while (menuChoice != 4) {
		cout << "\n " << myLine << "\n\n";
//		cout << "\n"; myLine.writeTo(cout); cout << "\n\n";
		cout << "Conga, Conga, Con-GA!  Conga, Conga, Con-GA!\n" << endl;
		cout << MY_MENU;
		cin >> menuChoice;
		if (menuChoice == 1 || menuChoice == 2 || menuChoice == 3) {
			cout << "\nWhat is your name? ";
			cin >> yourName;
		}
		if (menuChoice == 4) {
			cout << "\n*** " << "Leaving so soon? Come again!!" << endl;
			break;
		}

		switch( menuChoice ) {
		case 1:
			myLine.append(yourName);
			break;
		case 2:
			cout << "Who do you want to follow? ";
			cin >> otherPersonsName;
			if ( !myLine.insertAfter(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		case 3:
			cout << "Who do you want to precede? ";
			cin >> otherPersonsName;
			if ( !myLine.insertBefore(otherPersonsName, yourName) ) {
				cout << "\n***" << otherPersonsName
					 << " is not dancing!\n" << endl;
			}
			break;
		default:
			cout << "\n*** " << menuChoice
			     << " is not a valid choice!\n" << endl;
		}
	}
}
/* List.h provides a class for storing information using a Linked List structure.
 * List.h
 * Student Name: Shion Fukuzawa (sf27), Ian Adams (isa3)
 * Date: March 11, 2017
 */

#ifndef LIST_H_
#define LIST_H_

#include <iostream>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

template <class Item>
class List {
public:
	List();
	List(const List& original);
	virtual ~List();

	unsigned getSize() const { return mySize; }
	Item getFirst() const;
	Item getLast() const;
	int getIndexOf(const Item& it) const;

	List<Item>& operator=(const List<Item>& original);
	bool operator==(const List<Item>& otherList);
	bool operator!=(const List<Item>& original) const;

	void append(const Item& it);
	void prepend(const Item& it);
	void insert(const Item& it, int index);
	Item remove(int index);
	bool insertAfter(const Item& item, const Item& newItem);
	bool insertBefore(const Item& item, const Item& newItem);

	void readFrom(istream& in);
	void writeTo(ostream& out, const string& separator=" ") const;
	void readFrom(const string& fileName);
	void writeTo(const string& fileName);

private:
	struct Node {
		Node();
		Node(Item it, Node* next);
		~Node();
		Item  myItem;
		Node* myNext;
	};
	unsigned mySize;
	Node*    myFirst;
	Node*    myLast;

	void makeCopyOf(const List<Item>& original);

	friend class ListTester;
};

template <class Item>
ostream& operator<<(ostream &out, const List<Item>& ls) {
	ls.writeTo(out, "=>");
	return out;
}


/*
 * Default constructor
 * Initializes all instance variables.
 */
template <class Item>
List<Item>::List() {
	mySize = 0;
	myFirst = myLast = NULL;
}

/*
 * Private method for copying contents of an original list into a new list.
 *
 */
template <class Item>
void List<Item>::makeCopyOf(const List<Item>& original) {
	if (original.getSize() > 0) {
		Node* oPtr = original.myFirst;
		while (oPtr != NULL) {
			append(oPtr->myItem);
			oPtr = oPtr->myNext;
		}
	}
}

/*
 * Copy constructor.
 * Creates a new list with the same values as original list.
 */
template <class Item>
List<Item>::List(const List<Item>& original) {
	mySize = 0;
	myFirst = myLast = NULL;
	makeCopyOf(original);
}

/*
 * Default Node constructor.
 * Node is a private Struct defined in the list class.
 */
template <class Item>
List<Item>::Node::Node() {
	myItem = Item();
	myNext = NULL;
}

/*
 * Explicit Node constructor.
 */
template <class Item>
List<Item>::Node::Node(Item it, Node* next) {
	myItem = it;
	myNext = next;
}

/*
 * Destructor
 * This implementation of a list utilizes C++'s recursive destructor calls.
 */
template <class Item>
List<Item>::~List() {
	delete myFirst;
	myFirst = myLast = NULL;
	mySize = 0;
}

/*
 * Node struct destructor
 */
template <class Item>
List<Item>::Node::~Node() {
	//	cout << "~Node() is deallocating the node containing item " << myItem << endl;
	delete myNext;
	myNext = NULL;
}

/* getFirst()
 * Returns the first item stored in the list.
 */
template <class Item>
Item List<Item>::getFirst() const {
	if (myFirst != NULL) {
		return myFirst->myItem;
	} else {
		throw underflow_error("Cannot access empty list!!");
	}
}

/* getLast()
 * Returns the last item stored in the list.
 */
template <class Item>
Item List<Item>::getLast() const {
	if (myLast != NULL) {
		return myLast->myItem;
	} else {
		throw underflow_error("Cannot access empty list!!");
	}
}

/* getIndexOf
* @param: Item&, of which the index in the list is being found
* Return: Integer, the index
* written by Ian Adams (isa3)
*/
template <class Item>
int List<Item>::getIndexOf(const Item& it) const {
	if (mySize != 0) {
		Node * myPtr = myFirst;
		int index = 0;
		while (myPtr != NULL) {
			if( myPtr->myItem == it) {
				return index;
			}
			index++;
			myPtr = myPtr->myNext;
		}
	}
	return -1;
}

/*
 * Assignment operator. Copies a list into another list.
 */
template <class Item>
List<Item>& List<Item>::operator=(const List<Item>& original) {
	if (this == &original) {
		return *this;
	}

	delete myFirst;
	myFirst = myLast = NULL;
	mySize = 0;

	makeCopyOf(original);

	return *this;
}

/* operator==
 * @param: Another list to compare this list to.
 * Returns true if the contents of both lists are the same.
 * written by Shion Fukuzawa (sf27)
 */
template <class Item>
bool List<Item>::operator==(const List<Item>& otherList) {
	if (mySize != otherList.getSize())
		return false;

	if (mySize == 0)
		return true;

	Node* myCurrent = myFirst;
	Node* otherCurrent = otherList.myFirst;

	while (myCurrent != NULL) {
		if (myCurrent->myItem != otherCurrent->myItem)
			return false;

		myCurrent = myCurrent->myNext;
		otherCurrent = otherCurrent->myNext;
	}

	return true;
}

/* operator!=
 * @param: List&, a reference to the list being compared
 * Return: Boolean
 * written by Ian Adams (isa3)
 */
template <class Item>
bool List<Item>::operator!=(const List<Item>& original) const {
	if (original.mySize != 0) {
		if (original.mySize == mySize) {
			Node * oPtr = original.myFirst;
			Node * myPtr = myFirst;
			while (oPtr != NULL) {
				if (oPtr->myItem != myPtr->myItem) {
					return true;
				} else {
					oPtr = oPtr->myNext;
					myPtr = myPtr->myNext;
				}
			}
			return false;
		}
		return true;
	} else {
		if ( mySize == 0) {
			return false;
		}
		return true;
	}
}

/*
 * Append adds a new node with desired item at the end of the list.
 */
template <class Item>
void List<Item>::append(const Item& it) {
	Node* newNode = new Node(it, NULL);
	if (mySize == 0) {
		myFirst = newNode;
	} else {
		myLast->myNext = newNode;
	}

	myLast = newNode;
	mySize++;
}

/*
 * Prepends a new node with desired item at the head of the list.
 * written by Shion Fukuzawa (sf27)
 */
template <class Item>
void List<Item>::prepend(const Item& it) {
	Node* newNode = new Node(it, NULL);
	if (mySize == 0) {
		myLast = newNode;
	} else {
		newNode->myNext = myFirst;
	}

	myFirst = newNode;
	mySize++;
}

/*
 * Inserts a new node with desired item at the specified index.
 * If the index is less than or equal to 0, the node will be prepended to the list.
 * If the index is greater than the size of the list, the node will be appended to the end of the list.
 * written by Shion Fukuzawa (sf27)
 */
template <class Item>
void List<Item>::insert(const Item& it, int index) {
	Node* newNode = new Node(it, NULL);
	if (mySize == 0) {
		myFirst = newNode;
		myLast = newNode;
	} else {
		if (index <= 0) {
			newNode->myNext = myFirst;
			myFirst = newNode;
		} else if (index > (int)mySize) {
			myLast->myNext = newNode;
			myLast = newNode;
		} else {

			Node* current = myFirst;
			Node* next = current->myNext;

			for (int i = 0; i < index - 1; i++) {
				next = current->myNext;
				current = next;
			}

			newNode->myNext = next;
			current->myNext = newNode;
		}
	}

	mySize++;
}

/* remove
 * @param: int index, the index whose Node will be removed from the list
 * Return: Item, the item at that Node in the list
 * written by Ian Adams (isa3)
 */
template <class Item>
Item List<Item>::remove(int index) {
	if (mySize != 0) {
		Item item;
		Node * myPtr = myFirst;
		if (index < 1) {
			myPtr = myFirst->myNext;
			myFirst->myNext = NULL;
			item = myFirst->myItem;
			delete myFirst;
			myFirst = myPtr;
		} else if (index > (int)(mySize - 1)) {
			while (myPtr->myNext->myNext != NULL) {
				myPtr = myPtr->myNext;
			}
			myLast = myPtr;
			item = myLast->myNext->myItem;
			delete myLast->myNext;
			myLast->myNext = NULL;
		} else {
			for (int i=0; i < (index-1); i++) {
				myPtr = myPtr->myNext;
			}
			Node * deletePtr = myPtr->myNext;
			myPtr->myNext = myPtr->myNext->myNext;
			deletePtr->myNext = NULL;
			item = deletePtr->myItem;
			delete deletePtr;
		}
		mySize--;
		return item;
	} else {
		throw range_error("Empty list.");
	}
}

template <class Item>
bool List<Item>::insertAfter(const Item& item, const Item& newItem) {
	Node* current = myFirst;
	Node* newNode = new Node(newItem, NULL);
	while (current != NULL) {
		if (current->myItem == item) {
			newNode->myNext = current->myNext;
			current->myNext = newNode;
			mySize++;
			if (current == myLast) myLast = newNode;
			return true;
		}
		current = current->myNext;
	}
	delete newNode;
	return false;
}

template <class Item>
bool List<Item>::insertBefore(const Item& item, const Item& newItem) {
	Node* previous, * current;
	previous = current = myFirst;
	Node* newNode = new Node(newItem, NULL);
	while (current != NULL) {
		if (current->myItem == item) {
			newNode->myNext = current;
			if (current == myFirst)
				myFirst = newNode;
			else {
				previous->myNext = newNode;
			}
			mySize++;
			return true;
		}
		previous = current;
		current = current->myNext;
	}
	delete newNode;
	return false;
}


/*
 * Reads an arbitrary number of values from cin, appending each value to the list.
 * Terminates when '\n' is received from the stream.
 * written by Shion Fukuzawa (sf27)
 */
template <class Item>
void List<Item>::readFrom(istream& in) {
	Item newValue;

	string line;
	getline(in, line);
	istringstream iss(line);
	while (iss >> newValue)
		append(newValue);
}

/* writeTo
 * @param: ostream&, the stream being written to
 * Return: none
 * written by Ian Adams (isa3)
 */
template <class Item>
void List<Item>::writeTo(ostream& out, const string& separator) const {
	Node * current = myFirst;
	out << current->myItem;
	current = current->myNext;
	while (current != NULL) {
		out << separator << current->myItem << flush;
		current = current->myNext;
	}
	out << '\n' << flush;
}

/* readFrom
 * @param: string&, the fileName being read from
 * Return: none
 * written by Ian Adams (isa3)
 */
template <class Item>
void List<Item>::readFrom(const string& fileName) {
	ifstream fin(fileName.c_str());
	assert(fin.is_open());
	readFrom(fin);
	fin.close();
}

/*
 * Writes all values stored in the list to a file separated by ' ' and ended with '\n'
 * written by Shion Fukuzawa
 */
template <class Item>
void List<Item>::writeTo(const string& fileName) {
	ofstream fout(fileName.c_str());
	assert( fout.is_open() );
	Node* current = myFirst;
	Node* next = NULL;

	while (current != NULL) {
		next = current->myNext;
		fout << current->myItem << ' ' << flush;
		current = next;
	}
	fout << '\n' << flush;

	fout.close();
}

#endif /* LIST_H_ */
/* ListTester.h declares the test-class for class List.
 * Started by Joel Adams
 * Student Name: Shion Fukuzawa (sf27), Ian Adams (isa3)
 * Date: March 11, 2017
 */

#ifndef LISTTESTER_H_
#define LISTTESTER_H_

class ListTester {
public:
	void runTests();
	void testDefaultConstructor();
	void testNodeDefaultConstructor();
	void testNodeExplicitConstructor();
	void testAppend();
	void testDestructor();
	void testCopyConstructor();
	void testAssignment();
	void testPrepend();
	void testInsert();
	void testInsertAfter();
	void testInsertBefore();
	void testEquality();
	void testReadFromStream();
	void testWriteToString();
	void testInequality();
	void testOstream();
	void testWriteToStream();
	void testReadFromString();
	void testGetIndexOf();
	void testRemove();
};

#endif /*LISTTESTER_H_*/
/* ListTester.cpp defines the test methods for class List.
 * Started by Joel Adams
 * Student Name: Shion Fukuzawa (sf27), Ian Adams (isa3)
 * Date: March 11, 2017
 *
 * Tests written by Shion Fukuzawa:
 * 		testPrepend(), testInsert(), testEquality(), testReadFromStream(), testWriteToString()
 * Tests written by Ian Adams:
 * 		testInequality(), testWriteToStream(), testReadFromString(), testGetIndexOf(), testRemove()
 */

#include "ListTester.h" // ListTester
#include "List.h"       // List
#include <iostream>     // cin, cout
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // underflow_error
#include <fstream>      // ifstream, ofstream
using namespace std;

void ListTester::runTests() {
	cout << "Running List tests..." << endl;
	testDefaultConstructor();
	testCopyConstructor();
	testDestructor();
	testNodeDefaultConstructor();
	testNodeExplicitConstructor();
	testAssignment();
	testEquality();
	testInequality();
	testOstream();
	testReadFromStream();
	testWriteToStream();
	testReadFromString();
	testWriteToString();
	testAppend();
	testPrepend();
	testGetIndexOf();
	testInsert();
	testInsertAfter();
	testInsertBefore();
	testRemove();
	cout << "All tests passed!" << endl;
}

void ListTester::testDefaultConstructor() {
	cout << "Testing List default constructor... " << flush;
	List<double> aList;
	assert( aList.mySize == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeDefaultConstructor() {
	cout << "Testing Node default constructor... " << flush;
	List<double>::Node aNode;
	assert( aNode.myItem == double() );
	assert( aNode.myNext == NULL );
	cout << "Passed!" << endl;
}

void ListTester::testNodeExplicitConstructor() {
	cout << "Testing Node explicit constructor... " << flush;
	List<double>::Node n1(11, NULL);
	assert( n1.myItem == 11 );
	assert( n1.myNext == NULL );
	cout << " 1 " << flush;

	List<double>::Node *n3 = new List<double>::Node(33, NULL);
	List<double>::Node n2(22, n3);
	assert( n2.myItem == 22 );
	assert( n2.myNext == n3 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAppend() {
	cout << "Testing append()... " << flush;
	// empty List
	List<double> aList;
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	try {
		aList.getFirst();
		cerr << "getFirst() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0a " << flush;
	}
	try {
		aList.getLast();
		cerr << "getLast() worked on empty list" << endl;
		exit(1);
	} catch (underflow_error&) {
		cout << " 0b " << flush;
	}
	// append to empty list
	aList.append(11);
	assert( aList.getSize() == 1 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast == aList.myFirst );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 11 );
	assert( aList.myFirst->myNext == NULL );
	cout << " 1 " << flush;
	// append to a list containing 1 Item
	aList.append(22);
	assert( aList.getSize() == 2 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.myFirst != aList.myLast );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 22 );
	assert( aList.myFirst->myNext != NULL );
	assert( aList.myLast->myNext == NULL );
	cout << " 2 " << flush;
	// append to a list containing 2 Items
	aList.append(33);
	assert( aList.getSize() == 3 );
	assert( aList.myFirst != NULL );
	assert( aList.myLast != NULL );
	assert( aList.getFirst() == 11 );
	assert( aList.getLast() == 33 );
	assert( aList.myFirst->myNext->myItem == 22 );
	assert( aList.myLast->myNext == NULL );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

// Written by Shion Fukuzawa (sf27)
void ListTester::testPrepend() {
	cout << "Testing prepend... " << flush;

	// prepend to empty list
	List<double> list1;
	assert( list1.getSize() == 0 );
	assert( list1.myFirst == NULL );
	assert( list1.myLast == NULL );

	list1.prepend(5);
	assert( list1.getSize() == 1 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast == list1.myFirst );
	assert( list1.getFirst() == 5 );
	assert( list1.getLast() == 5 );
	assert( list1.myFirst->myNext == NULL );
	cout << " 0 " << flush;

	// prepend to list with 1 item
	list1.prepend(10);
	assert( list1.getSize() == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.myFirst != list1.myLast );
	assert( list1.getFirst() == 10 );
	assert( list1.getLast() == 5 );
	assert( list1.myFirst->myNext != NULL );
	assert( list1.myLast->myNext == NULL );
	cout << " 1 " << flush;

	// prepend to list with 3 items
	list1.append(0);
	list1.prepend(15);
	assert( list1.getSize() == 4 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 15 );
	assert( list1.getLast() == 0 );
	assert( list1.myFirst->myNext->myItem == 10 );
	assert( list1.myLast->myNext == NULL );
	assert( list1.myFirst->myNext->myNext->myItem == 5 );
	assert( list1.myLast->myNext == NULL );
	cout << " 2 " << flush;

	cout << " Passed!" << endl;
}

// Written by Shion Fukuzawa (sf27)
void ListTester::testInsert() {
	cout << "Testing insert(it, i)... " << flush;

	// Empty list, high index
	List<double> list1;
	list1.insert(3, 100);
	assert( list1.mySize == 1 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 3 );
	assert( list1.getLast() == 3 );
	cout << " 0 " << flush;

	// List with 1 item, negative index, insert in the front
	list1.insert(1, -20);
	assert( list1.mySize == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 1 );
	assert( list1.getLast() == 3 );
	cout << " 1 " << flush;

	// List with multiple items, insert in the middle
	list1.insert(2, 1);
	assert( list1.mySize == 3 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 1 );
	assert( list1.getLast() == 3 );
	assert( list1.myFirst->myNext->myItem == 2 );
	cout << " 2 " << flush;

	// List with multiple items, high index
	list1.insert(4, 100);
	assert( list1.mySize == 4 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 1 );
	assert( list1.getLast() == 4 );
	assert( list1.myFirst->myNext->myItem == 2 );
	assert( list1.myFirst->myNext->myNext->myItem == 3 );
	cout << " 3 " << flush;

	cout << " Passed!" << endl;
}

void ListTester::testInsertAfter() {
	cout << "Testing insertAfter(it, newIt)... " << flush;

	// Empty list, Shouldn't insert anything
	List<double> list1;
	assert( list1.insertAfter(3, 1) == false );
	assert( list1.mySize == 0 );
	assert( list1.myFirst == NULL );
	assert( list1.myLast == NULL );
	cout << " 0 " << flush;

	// List with 1 item, insert after single item
	list1.insert(1, 0);       // [1]
	assert( list1.insertAfter(1, 3) );  // [1, 3]
	assert( list1.mySize == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 1 );
	assert( list1.getLast() == 3 );
	cout << " 1 " << flush;

	// List with multiple items, insert after middle item
	assert( list1.insertAfter(1, 2) );  // [1, 2, 3]
	assert( list1.mySize == 3 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 1 );
	assert( list1.getLast() == 3 );
	assert( list1.myFirst->myNext->myItem == 2 );
	cout << " 2 " << flush;

	// List with multiple items, insert after first of repeated values.
	list1.insert(4, 100);    // [1, 2, 3, 4]
	list1.insert(4, 0);      // [4, 1, 2, 3, 4]
	assert( list1.insertAfter(4, 3) ); // [4, 3, 1, 2, 3, 4]
	assert( list1.mySize == 6 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 4 );
	assert( list1.getLast() == 4 );
	assert( list1.myFirst->myNext->myItem == 3 );
	assert( list1.myFirst->myNext->myNext->myItem == 1 );
	assert( list1.myFirst->myNext->myNext->myNext->myItem == 2 );
	cout << " 3 " << flush;

	cout << " Passed!" << endl;
}

void ListTester::testInsertBefore() {
	cout << "Testing insertBefore(it, newIt)... " << flush;

	// Empty list, Shouldn't insert anything
	List<double> list1;
	assert( list1.insertBefore(3, 1) == false );
	assert( list1.mySize == 0 );
	assert( list1.myFirst == NULL );
	assert( list1.myLast == NULL );
	cout << " 0 " << flush;

	// List with 1 item, insert before single item
	list1.insert(1, 0);       // [1]
	assert( list1.insertBefore(1, 3) );  // [3, 1]
	assert( list1.mySize == 2 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 3 );
	assert( list1.getLast() == 1 );
	cout << " 1 " << flush;

	// List with multiple items, insert before middle item
	assert( list1.insertBefore(3, 5) );  // [5, 3, 1]
	assert( list1.mySize == 3 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 5 );
	assert( list1.getLast() == 1 );
	assert( list1.myFirst->myNext->myItem == 3 );
	cout << " 2 " << flush;

	// List with multiple items, insert after first of repeated values.
	assert( list1.insertBefore(1, 2) );    // [5, 3, 2, 1]
	assert( list1.insertBefore(3, 2) );      // [5, 2, 3, 2, 1]
	assert( list1.insertBefore(2, 4) ); // [5, 4, 2, 3, 2, 1]
	assert( list1.mySize == 6 );
	assert( list1.myFirst != NULL );
	assert( list1.myLast != NULL );
	assert( list1.getFirst() == 5 );
	assert( list1.getLast() == 1 );
	assert( list1.myFirst->myNext->myItem == 4 );
	assert( list1.myFirst->myNext->myNext->myItem == 2 );
	assert( list1.myFirst->myNext->myNext->myNext->myItem == 3 );
	cout << " 3 " << flush;

	cout << " Passed!" << endl;
}


void ListTester::testDestructor() {
	cout << "Testing destructor... " << flush;
	List<double> aList;
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 1 " << flush;

	aList.append(11);
	aList.append(22);
	aList.append(33);
	aList.~List();
	assert( aList.getSize() == 0 );
	assert( aList.myFirst == NULL );
	assert( aList.myLast == NULL );
	cout << " 2 " << flush;
	cout << "Passed!  But double-check for memory leaks!" << endl;
}

void ListTester::testCopyConstructor() {
	cout << "Testing copy constructor... " << flush;
	// copy empty list
	List<double> list1;
	List<double> list2(list1);
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// copy nonempty list
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4(list3);
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void ListTester::testAssignment() {
	cout << "Testing assignment... " << flush;
	// empty to empty assignment
	List<double> list1;
	List<double> list2;
	list2 = list1;
	assert( list2.getSize() == 0 );
	assert( list2.myFirst == NULL );
	assert( list2.myLast == NULL );
	cout << " 1 " << flush;

	// non-empty to empty assignment
	List<double> list3;
	list3.append(11);
	list3.append(22);
	list3.append(33);
	List<double> list4;
	list4 = list3;
	assert( list4.getSize() == 3 );
	assert( list4.getFirst() == 11 );
	assert( list4.getLast() == 33 );
	assert( list4.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list4.myFirst != list3.myFirst );
	assert( list4.myFirst->myNext != list3.myFirst->myNext );
	assert( list4.myLast != list3.myLast );
	cout << " 2 " << flush;

	// equal-sized non-empty to non-empty assignment
	List<double> list5;
	list5.append(44);
	list5.append(55);
	list5.append(66);
	list5 = list3;
	assert( list5.getSize() == 3 );
	assert( list5.getFirst() == 11 );
	assert( list5.getLast() == 33 );
	assert( list5.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list5.myFirst != list3.myFirst );
	assert( list5.myFirst->myNext != list3.myFirst->myNext );
	assert( list5.myLast != list3.myLast );
	cout << " 3 " << flush;

	// empty to non-empty assignment
	List<double> list6;
	list6.append(44);
	list6.append(55);
	list6.append(66);
	List<double> list7;
	list6 = list7;
	assert( list6.getSize() == 0 );
	assert( list6.myFirst == NULL );
	assert( list6.myLast == NULL );
	cout << " 4 " << flush;

	// unequal-sized non-empty to non-empty assignment
	List<double> list8;
	list8.append(44);
	list8.append(55);
	list8.append(66);
	list8.append(77);
	list8 = list3;
	assert( list8.getSize() == 3 );
	assert( list8.getFirst() == 11 );
	assert( list8.getLast() == 33 );
	assert( list8.myFirst->myNext->myItem == 22 );
      // check that nodes are distinct
	assert( list8.myFirst != list3.myFirst );
	assert( list8.myFirst->myNext != list3.myFirst->myNext );
	assert( list8.myLast != list3.myLast );
	cout << " 5 " << flush;

	// assignment chaining
	List<double> list9;
	list9.append(44);
	list9.append(55);
	list9.append(66);
	list9.append(77);
	List<double> list10;
	list10 = list9 = list8;
	assert( list10.getSize() == 3 );
	assert( list10.getFirst() == 11 );
	assert( list10.getLast() == 33 );
	assert( list10.myFirst->myNext->myItem == 22 );
	cout << " 6 " << flush;

	// self-assignment (stupid, but possible)
	List<double> list11;
	list11.append(11);
	list11.append(22);
	list11.append(33);
	list11 = list11;
	assert( list11.getSize() == 3 );
	assert( list11.getFirst() == 11 );
	assert( list11.getLast() == 33 );
	assert( list11.myFirst->myNext->myItem == 22 );
	cout << " 7 " << flush;

	cout << "Passed!  But double-check for memory leaks!" << endl;
}

// Written by Shion Fukuzawa (sf27)
void ListTester::testEquality() {
	cout << "Testing equality... " << flush;
	// empty case
	List<double> list1;
	List<double> list2;
	assert( list1 == list2 );
	cout << " 0 " << flush;

	// same size, same values
	List<double> list3; // {1, 2, 3, 4}
	List<double> list4; // {1, 2, 3, 4}
	for (int i = 0; i < 4; i++) {
		list3.append(i + 1);
		list4.append(i + 1);
	}
	assert( list3 == list4 );
	cout << " 1 " << flush;

	// same size, different values
	List<double> list5; // {5, 10, 15, 20}
	for (int i = 0; i < 4; i++) {
		list5.append((i+1) * 5);
	}
	assert( !(list3 == list5) );
	cout << " 2 " << flush;

	// empty vs non-empty
	assert( !(list1 == list5) );
	cout << " 3 " << flush;

	// different size
	List<double> list6; // {1, 2, 3, 4, 5}
	for (int i = 0; i < 5; i++) {
		list6.append(i + 1);
	}
	assert( !(list3 == list6) );
	cout << " 4 " << flush;

	// same size, only first value different
	List<double> list7; // {0, 2, 3, 4, 5}
	list7.append(0);
	for (int i = 0; i < 4; i++) {
		list7.append(i + 2);
	}
	assert( !(list6 == list7) );
	cout << " 5 " << flush;

	// same size, middle value different
	List<double> list8; // {1, 2, 7, 4, 5}
	list7.append(1);
	list7.append(2);
	list7.append(7);
	list7.append(4);
	list7.append(5);
	assert( !(list6 == list8) );
	cout << " 6 " << flush;

	// same size, last value different
	List<double> list9; // {1, 2, 3, 4, 0}
	for (int i = 0; i < 4; i++) {
		list9.append(i + 1);
	}
	list9.append(0);
	cout << " 7 " << flush;

	cout << " Passed!" << endl;
}

// Written by Ian Adams (isa3)
void ListTester::testInequality() {
	cout << "Testing inequality..." << flush;
	//empty/empty
	List<double> list1;
	List<double> list2;
	assert( (list1 != list2) == false);
	cout << " 0 " << flush;
	//empty/non-empty
	List<double> list3;
	list3.append(2);
	list3.append(4);
	list3.append(8);
	assert( (list1 != list3) == true);
	cout << " 1 " << flush;
	//non-empty/non-empty, same list
	List<double> list4;
	list4.append(2);
	list4.append(4);
	list4.append(8);
	assert( (list3 != list4) == false);
	cout << " 2 " << flush;
	//non-empty/non-empty, different lists
	List<double> list5;
	list5.append(3);
	list5.append(6);
	list5.append(9);
	assert( (list3 != list5) == true);
	cout << " 3 " << flush;
	//different size lists
	List<double> list6;
	list6.append(2);
	list6.append(4);
	list6.append(8);
	list6.append(16);
	assert( (list3 != list6) == true);
	cout << " 4 " << flush;

	cout << "Passed! " << endl;
}

void ListTester::testOstream() {
	cout << "Testing operator<<()... " << flush;

	List<double> list2;
	ofstream fout("ListTest2.txt");
	assert( fout.is_open());
	list2.append(5);
	list2.append(3);
	list2.append(1);
	fout << list2;
	List<string> list3;
	list3.readFrom("ListTest2.txt");
	fout.close();

	assert( list3.mySize == 1 );
	assert( list3.myFirst != NULL );
	assert( list3.myLast != NULL );
	assert( list3.myFirst == list3.myLast );
	assert( list3.myFirst->myItem == "5=>3=>1" );

	cout << " Passed!" << endl;
}


// Written by Shion Fukuzawa (sf27)
void ListTester::testReadFromStream() {
	cout << "Testing readFrom(istream)... " << flush;

	// Use an fstream as the istream to automate the test.
	ifstream fin("ListTester1.txt");
	assert( fin.is_open() );

	List<double> list1;
	list1.readFrom(fin);

	assert( list1.getSize() == 9 );
	assert( list1.myFirst != list1.myLast );
	assert( list1.myFirst != NULL );
	assert( list1.myFirst->myItem == 1 );
	assert( list1.myFirst->myNext != NULL );
	assert( list1.myFirst->myNext->myItem == 2 );
	assert( list1.myFirst->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myItem == 3 );
	assert( list1.myFirst->myNext->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myNext->myItem == 4 );
	assert( list1.myFirst->myNext->myNext->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myItem == 5 );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext->myItem == 6 );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myItem == 7 );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list1.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myNext->myItem == 8 );
	assert( list1.myLast->myItem == 9);
	cout << " 0 " << flush;

	cout << " Passed!" << endl;
}

// Written by Ian Adams (isa3)
void ListTester::testWriteToStream() {
	cout << "Testing writeTo(ostream)... " << flush;
	List<double> list1;
	list1.readFrom("ListTest1.txt");
	ofstream fout("ListTest1Copy.txt");
	assert( fout.is_open());
	list1.writeTo(fout);
	fout.close();

	cout << "Passed!" << endl;
}

// Written by Ian Adams (isa3)
void ListTester::testReadFromString() {
	cout << "Testing readFrom(string)... " << flush;
	List<double> list1;
	list1.readFrom("ListTest1.txt");
	assert(list1.mySize == 3);
	assert( list1.myFirst->myItem == 4);
	assert( list1.myFirst->myNext->myItem == 8);
	assert( list1.myFirst->myNext->myNext->myItem == 16);
	cout << "Passed!" << endl;
}

// Written by Shion Fukuzawa (sf27)
void ListTester::testWriteToString() {
	cout << "Testing writeTo(string)... " << flush;

	List<double> list1;
	ifstream fin("ListTester1.txt");
	assert( fin.is_open() );
	list1.readFrom(fin);
	fin.close();

	list1.writeTo("ListTester1Copy.txt");
	cout << " 0 " << flush;

	// Check if the values were properly copied
	ifstream fin2("ListTester1Copy.txt");
	assert( fin2.is_open() );
	List<double> list2;
	list2.readFrom(fin2);
	assert( list2.getSize() == 9 );
	assert( list2.myFirst != list2.myLast );
	assert( list2.myFirst != NULL );
	assert( list2.myFirst->myItem == 1 );
	assert( list2.myFirst->myNext != NULL );
	assert( list2.myFirst->myNext->myItem == 2 );
	assert( list2.myFirst->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myItem == 3 );
	assert( list2.myFirst->myNext->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myNext->myItem == 4 );
	assert( list2.myFirst->myNext->myNext->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myItem == 5 );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext->myItem == 6 );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myItem == 7 );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myNext != NULL );
	assert( list2.myFirst->myNext->myNext->myNext->myNext->myNext->myNext->myNext->myItem == 8 );
	assert( list2.myLast->myItem == 9);
	fin2.close();
	cout << " 1 " << flush;


	cout << " Passed!" << endl;
}

// Written by Ian Adams (isa3)
void ListTester::testGetIndexOf() {
	cout << "Testing getIndexOf()... " << flush;
	//non-empty
	List<double> list1;
	list1.append(5);
	list1.append(15);
	list1.append(30);
	list1.append(25);
	assert(list1.getIndexOf(5) == 0);
	assert(list1.getIndexOf(15) == 1);
	assert(list1.getIndexOf(30) == 2);
	assert(list1.getIndexOf(25) == 3);
	assert(list1.getIndexOf(40) == -1);
	cout << " 0 " << flush;
	//empty
	List<double> list2;
	assert( list2.getIndexOf(1) == -1);
	cout << " 1 " << flush;

	cout << "Passed!" << endl;
}

// Written by Ian Adams (isa3)
void ListTester::testRemove() {
	cout << "Testing remove()... " << flush;
	List<double> list1;
	list1.append(1);
	list1.append(5);
	list1.append(8);
	list1.append(13);
	list1.append(21);
	typedef double Item;
	//middle index
	Item it1 = list1.remove(2);
	assert(list1.mySize == 4);
	assert(list1.myFirst->myNext->myItem == 5);
	assert(list1.myFirst->myNext->myNext->myItem == 13);
	assert(it1 == 8);
	cout << " 0 " << flush;
	//beginning index
	Item it2 = list1.remove(-1);
	assert(list1.mySize == 3);
	assert(list1.myFirst->myItem == 5);
	assert(it2 == 1);
	cout << " 1 " << flush;
	//ending index
	Item it3 = list1.remove(10);
	assert(list1.mySize == 2);
	assert(list1.myLast->myItem == 13);
	assert(it3 == 21);
	cout << " 2 " << flush;
	List<double> list2;
	try {
		list2.remove(5);
		cerr << "remove() worked on an empty list" << endl;
	} catch (range_error&) {
		cout << " 3 " << flush;
	}

	cout << "Passed! But double check for memory leaks!" << endl;
}







4 8 16
4 8 16
5=>3=>1
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 
sf27@chomsky:~/Desktop/CS112/proj6$ cd Debug/
sf27@chomsky:~/Desktop/CS112/proj6/Debug$ ls
CongaLine.d  ListTester.d  main.d  makefile    proj6	   subdir.mk
CongaLine.o  ListTester.o  main.o  objects.mk  sources.mk
sf27@chomsky:~/Desktop/CS112/proj6/Debug$ makd e all
make: Nothing to be done for 'all'.
sf27@chomsky:~/Desktop/CS112/proj6/Debug$ cd ..
sf27@chomsky:~/Desktop/CS112/proj6$ ./Debug/proj6 
Running List tests...
Testing List default constructor... Passed!
Testing copy constructor...  1  2 Passed!
Testing destructor...  1  2 Passed!  But double-check for memory leaks!
Testing Node default constructor... Passed!
Testing Node explicit constructor...  1  2 Passed!
Testing assignment...  1  2  3  4  5  6  7 Passed!  But double-check for memory leaks!
Testing equality...  0  1  2  3  4  5  6  7  Passed!
Testing inequality... 0  1  2  3  4 Passed! 
Testing operator<<()...  Passed!
Testing readFrom(istream)...  0  Passed!
Testing writeTo(ostream)... Passed!
Testing readFrom(string)... Passed!
Testing writeTo(string)...  0  1  Passed!
Testing append()...  0a  0b  1  2  3 Passed!
Testing prepend...  0  1  2  Passed!
Testing getIndexOf()...  0  1 Passed!
Testing insert(it, i)...  0  1  2  3  Passed!
Testing insertAfter(it, newIt)...  0  1  2  3  Passed!
Testing insertBefore(it, newIt)...  0  1  2  3  Passed!
Testing remove()...  0  1  2  3 Passed! But double check for memory leaks!
All tests passed!
Ann and Bob have started a Conga Line!

 Ann=>Bob


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 1

What is your name? Charles

 Ann=>Bob=>Charles


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Andrew
Who do you want to follow? Ann

 Ann=>Andrew=>Bob=>Charles


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 2

What is your name? Ann
Who do you want to follow? Andre     Bruce

***Bruce is not dancing!


 Ann=>Andrew=>Bob=>Charles


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 3

What is your name? Ml allet
Who do you want to precede? Ann

 Mallet=>Ann=>Andrew=>Bob=>Charles


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> Drew    3

What is your name? Drew
Who do you want to precede? Charles

 Mallet=>Ann=>Andrew=>Bob=>Drew=>Charles


Conga, Conga, Con-GA!  Conga, Conga, Con-GA!

Please enter:
 1 to join the Conga line at the end
 2 to join the Conga line after a particular person
 3 to join the Conga line before a particular person
 4 to quit
--> 4

*** Leaving so soon? Come again!!
sf27@chomsky:~/Desktop/CS112/proj6$ exit

Script done on Wed 22 Mar 2017 05:17:39 PM EDT
