Script started on Fri 24 Feb 2017 04:26:16 PM EST
sf27@chomsky:~/Desktop/CS112/proj3$ ls
CoordinateSystemSimulator.cpp  Vec.cpp		 vecTest2Copy.txt
CoordinateSystemSimulator.h    Vec.h		 vecTest2.txt
Debug			       vecStreamOut.txt  VecTester.cpp
tester.cpp		       vecTest1Copy.txt  VecTester.h
typescript		       vecTest1.txt
sf27@chomsky:~/Desktop/CS112/proj3$ cat tester.cpp Vec.cpp Vec.h Vecter s   Tester.cppp  [Asf27@chomsky:~/Desktop/CS112/proj3$ cat tester.cpp Vec.cpp Vec.h VecTester.cppp[K
[K[Asf27@chomsky:~/Desktop/CS112/proj3$ cat tester.cpp Vec.cpp Vec.h VecTester.cppp  C [Asf27@chomsky:~/Desktop/CS112/proj3$ cat tester.cpp Vec.cpp Vec.h VecTester.cpp [K
[K[Asf27@chomsky:~/Desktop/CS112/proj3$ cat tester.cpp Vec.cpp Vec.h VecTester.cpp V ecTester.h V vecStreamOut.txt V vecTest1Copy.txt vecTest1.txt vecTest2o Copy.T txt vecTe st2.txt
/* tester.cpp drives the testing of our Vec class.
 * Student: Shion Fukuzawa
 * Date: February 21, 2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "CoordinateSystemSimulator.h"


int main() {
	VecTester vt;
	vt.runTests();
	cout << endl << endl << endl << endl << endl << endl << endl << endl << endl << endl;

	CoordinateSystemSimulator adam;
	adam.run();

}
/* Vec.cpp defines the methods for Vec, a simple vector class.
 * Student Name: Shion Fukuzawa, Joyce Chew
 * Date: February 21, 2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 *
 * readFrom(file), operator-(), operator!=(), operator[]() written by Shion Fukuzawa
 * writeTo(file), operator+(), operator*() written by Joyce Chew
 */
 
#include "Vec.h"
#include <fstream>
#include <cassert>
#include <stdexcept>

/* Default constructor
 * Postcondition: Sets mySize to 0 and myArray to NULL.
 */
Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

/* Explicit constructor
 * @param: size, An unsigned integer.
 * Postcondition: Sets mySize to size and myArray to an array of size mySize. Each value of myArray will be the
 * 				  the default value of type Item.
 */
Vec::Vec(unsigned size) {
	mySize = size;
	if (size == 0) {
		myArray = NULL;
	} else {
		myArray = new Item[size];
		for (unsigned i = 0; i < size; i++) {
			myArray[i] = Item();
		}
	}
}

/* Copy constructor
 * @param: original, The Vec object to copy.
 * Postcondition: Sets mySize to original's size. If the size is 0, sets myArray to NULL. Otherwise copies each value
 * 				  from original into myArray
 */
Vec::Vec(const Vec& original) {
	mySize = original.getSize();
	if (mySize == 0) {
		myArray = NULL;
		return;
	}
	myArray = new Item[mySize];
	for (unsigned i = 0; i < mySize; i++) {
		myArray[i] = original.getArray()[i];
	}
}

/* Destructor
 * Postcondition: Deallocate memory used by myArray, then reset values of myArray and mySize
 */
Vec::~Vec() {
	delete [] myArray;
	myArray = NULL;
	mySize = 0;
}

/* Subtraction operator.
 * @param: operand, Another vec to subtract from the current Vec.
 * return: A new Vec with size mySize and values of Vec - operand at each index.
 *
 * Written by Shion Fukuzawa
 */
Vec Vec::operator-(const Vec& operand) {
	Vec newVec;
	if (myArray == NULL && operand.getArray() == NULL)
		return newVec;
	else if (mySize != operand.getSize())
		throw invalid_argument("The two Vecs must be the same size!");

	newVec.setSize(mySize);

	for (unsigned i = 0; i < mySize; i++) {
		newVec[i] = myArray[i] - operand[i];
	}

	return newVec;
}

/* Addition operator.
 * @param: operand, Another vac to add to the current Vec.
 * return: a new Vec with size mySize and the values of the current Vec + operand at each index.
 *
 * Written by Joyce Chew
 */

Vec Vec::operator+(const Vec& operand) const {
	Vec newVec;
	if (myArray == NULL && operand.getArray() == NULL) {
		return newVec;
	}
	else if (mySize != operand.getSize()) {
		throw invalid_argument("The two Vecs must be the same size!");
	}

	newVec.setSize(mySize);

	for (unsigned i = 0; i < mySize; i++) {
		newVec[i] = myArray[i] + operand[i];
	}

	return newVec;
}

/* dot product
 * @param: operand, a Vec to dot product with the current Vec
 * return: a double that is the sum of the products of the values of the current Vec and operand at each index
 *
 * Written by Joyce Chew
 */

double Vec::operator*(const Vec& operand) const {
	double result = 0;
	if (myArray == NULL && operand.getArray() == NULL) {
		return result;
	}
	else if (mySize != operand.getSize()) {
		throw invalid_argument("The two Vecs must be the same size!");
	}

	for (unsigned i = 0; i < mySize; i++) {
		result += myArray[i] * operand[i];
	}

	return result;

}

/* Assignment operator
 * @param: original, the Vec that is being assigned to the Vec.
 * @return: The vector that has had the original vec assigned to it.
 */
Vec& Vec::operator=(const Vec& original) {
	// Handle assignment of the exact same object;
	if (myArray == original.getArray()) {
		return *this;
	}

	// Get the size
	mySize = original.getSize();

	// Delete the old array
	delete [] myArray;

	// If the size is 0, set myArray to NULL and return
	if (mySize == 0) {
		myArray = NULL;
		return *this;
	}

	// Create a new array of size mySize
	myArray = new Item[mySize];
	// Assign each value from orinal to myArray;
	for (unsigned i = 0; i < mySize; i++) {
		myArray[i] = original.getArray()[i];
	}

	return *this;
}

/* Tests if two Vecs are the same.
 * return: true if equal, false if not.
 */
bool Vec::operator==(const Vec& v2) {
	if (mySize != v2.getSize())
		return false;

	for (unsigned i = 0; i < mySize; i++) {
		if (myArray[i] != v2.getItem(i))
			return false;
	}
	return true;
}

/* Tests if two Vecs are not the same.
 * return: true if not equal, false otherwise.
 *
 * Written by Shion Fukuzawa
 */
bool Vec::operator!=(const Vec& v2) {
	if (mySize != v2.getSize())
		return true;

	for (unsigned i = 0; i < mySize; i++) {
		if (myArray[i] != v2.getItem(i))
			return true;
	}
	return false;
}

/* Subscript operator for retrieval. Returns item at index of myArray.
 *
 */
const Item Vec::operator[](unsigned index) const {
	if (myArray == NULL)
		throw range_error("The Vec is empty!!!");
	else if (index >= mySize)
		throw range_error("That is an invalid index for this array!!");

	return myArray[index];
}

/* Subscript operator to change a value at index.
 *
 */
Item& Vec::operator[](unsigned index) {
	if (myArray == NULL)
		throw range_error("The Vec is empty!!!");
	else if (index >= mySize)
		throw range_error("That is an invalid index for this array!!");

	return myArray[index];
}

/* Sets the value of a particular item in a vec. Throws range error if the vec is empty or index is out of range.
 * @param: index, the index of the item to set the value of.
 * @param: it, the value to set the item to.
 * postcondition: The value at index should be set to it.
 */
void Vec::setItem(unsigned index, const Item& it) {
	if (myArray == NULL) {
		throw range_error("The Vec is empty!!!");
	}
	else if (index >= mySize) {
		throw range_error("That is an invalid index for this array!!");
	}

	myArray[index] = it;

}

/* Gets the item at desired index. Throws range error if the vec is empty or index is out of range.
 * @param: index, the index of the item to retrieve
 * @return: The value at index of myArray
 */
Item Vec::getItem(unsigned index) const {
	if (myArray == NULL)
		throw range_error("The Vec is empty!!!");
	else if (index >= mySize)
		throw range_error("That is an invalid index for this array!!");

	return myArray[index];
}

/* Changes the size of an existing Vec to newSize.
 * @param: newSize, the size to change to.
 */
void Vec::setSize(unsigned newSize) {

	Item* copy = new Item[newSize]();
	if (newSize == 0) {
		mySize = 0;
		delete [] myArray;
		myArray = NULL;
		return;
	}
	if (newSize > mySize) {
		for (unsigned i = 0; i < mySize; i++) {
			copy[i] = myArray[i];
		}
	} else if (newSize < mySize) {
		for (unsigned i = 0; i < newSize; i++) {
			copy[i] = myArray[i];
		}
	} else {
		delete [] copy;
		copy = NULL;
		return;
	}

	delete [] myArray;
	myArray = copy;
	mySize = newSize;
}

/* Writes values in the Vec to an ostream.
 */
void Vec::writeTo(ostream& out) const {
	if (myArray == NULL)
		return;
	for (unsigned i = 0; i < mySize; i++) {
		out << myArray[i] << endl;
	}
}

/* Reads values from an istream and stores them into the Vec.
 * Precondition: The istream will only provide the number of values equal to mySize.
 */
void Vec::readFrom(istream& in) {
	for (unsigned i = 0; i < mySize; i++) {
		in >> myArray[i];
	}
}

/* Reads values from a file and stores them into the Vec.
 * Precondition: The file will have the number of items on the first line, then that many lines of items.
 * 				 The files will not have more items than the size of myArray.
 *
 * Written by Shion Fukuzawa
 */
void Vec::readFrom(const string& fileName) {
	ifstream fin(fileName.c_str());
	assert( fin.is_open() );
	unsigned newSize;
	fin >> newSize;
	if (newSize != mySize)
		this->setSize(newSize);
	for (unsigned i = 0; i < newSize; i++) {
		fin >> myArray[i];
	}
	fin.close();
}

/* Reads the size and values of a Vec and stores them in a file.
 * Postcondition: The file has the size of the Vec on the first line.
 *                The file has all the values of Vec, in order, separated by new lines.
 */

void Vec::writeTo(const string& fileName) const{
	ofstream fout(fileName.c_str());
	assert( fout.is_open() );
	fout << mySize << '\n';
	for (unsigned i = 0; i < mySize; i++) {
		fout << myArray[i] << '\n';
	}
	fout.close();
}









/* Vec.h provides a simple vector class named Vec.
 * Student Name: Shion Fukuzawa
 * Date: February 21, 2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();
	
	Vec operator-(const Vec& operand);
	Vec operator+(const Vec& operand) const;
	double operator*(const Vec& operand) const;
	Vec& operator=(const Vec& original);
	bool operator==(const Vec& v2);
	bool operator!=(const Vec& v2);
	const Item operator[](unsigned index) const;
	Item& operator[](unsigned index);

	unsigned getSize() const { return mySize; }
	void setSize(unsigned newSize);

	Item* getArray() const { return myArray; }
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;

	void writeTo(ostream& out) const;
	void writeTo(const string& fileName) const;
	void readFrom(istream& in);
	void readFrom(const string& fileName);

private:
	unsigned mySize;
	Item*    myArray;
	friend class VecTester;
};

#endif /*VEC_H_*/
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student Name: Shion Fukuzawa
 * Date: February 21, 2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testSubscriptRetrieve();
	testSubscriptChange();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void VecTester::testSubscriptRetrieve() const {
	cout << "Testing v[i]... " << flush;
	// empty Vec
	Vec v0;
	try {
		Item it = v0[0];
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2[3];
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubscriptChange() const {
	cout << "Testing v[i] = Item... " << flush;
		// empty case
		Vec v0;
		try {
			v0[0] = 11;
			cerr << "setItem() succeeded on empty Vec";
			exit(1);
		} catch (range_error&) {
			cout << " 0 " << flush;
		}
		// nonempty case, valid subscript
		Vec v(5);
		for (unsigned i = 0; i < 5; i++) {
			v[i] = i+1;
		}
		for (unsigned i = 0; i < 5; i++) {
			assert( v.myArray[i] == (i+1) );
		}
		cout << " 1 " << flush;
		// nonempty case, invalid subscript
		Vec v2(3);
		try {
			v2[3] = 33;
			cerr << "setItem() succeeded beyond end of Vec";
			exit(1);
		} catch (range_error&) {
			cout << " 2 " << flush;
		}
		cout << "Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (invalid_argument&) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
	*  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
	assert( v2.myArray != oldAddr );
	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student Name: Shion Fukuzawa
 * Date: February 21, 2017
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testSubscriptRetrieve() const;
	void testSubscriptChange() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
5
10
11
12
13
14
3
1
2
3
3
1
2
3
4
2
4
6
8
4
2
4
6
8
sf27@chomsky:~/Desktop/CS112/proj3$ cd Debug
sf27@chomsky:~/Desktop/CS112/proj3/Debug$ make all        ls
CoordinateSystemSimulator.d  objects.mk  subdir.mk  Vec.d	 VecTester.o
CoordinateSystemSimulator.o  proj3	 tester.d   Vec.o
makefile		     sources.mk  tester.o   VecTester.d
sf27@chomsky:~/Desktop/CS112/proj3/Debug$ make all
make: Nothing to be done for 'all'.
sf27@chomsky:~/Desktop/CS112/proj3/Debug$ cd ..
sf27@chomsky:~/Desktop/CS112/proj3$ ./Debug/proj3 
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing v[i]...  0  1  2 Passed!
Testing v[i] = Item...  0  1  2 Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2  3 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!










Please input the number of dimensions in your space (Must be greater than 0) -> 3
Please input the starting position.
Position at startPos[0] -> 0
Position at startPos[1] -> 0
Position at startPos[2] -> 0
Is this the position you would like to start at? [0, 0, 0] (y/n)
y
Enter the POSITIVE values of the vec you would like to add (enter -1 to terminate)
Value at newVec[0] is -> 2
Value at newVec[1] is -> 4
Value at newVec[2] is -> 5
Adding the Vec with values {2, 4, 5}... 
Success!!
Enter the POSITIVE values of the vec you would like to add (enter -1 to terminate)
Value at newVec[0] is -> 4
Value at newVec[1] is -> 1
Value at newVec[2] is -> 2
Adding the Vec with values {4, 1, 2}... 
Success!!
Enter the POSITIVE values of the vec you would like to add (enter -1 to terminate)
Value at newVec[0] is -> 2
Value at newVec[1] is -> 
6
Value at newVec[2] is -> 9
Adding the Vec with values {2, 6, 9}... 
Success!!
Enter the POSITIVE values of the vec you would like to add (enter -1 to terminate)
Value at newVec[0] is -> 0 -1
The final position after adding all of these values is {8, 11, 16}
sf27@chomsky:~/Desktop/CS112/proj3$ exit

Script done on Fri 24 Feb 2017 04:28:26 PM EST
